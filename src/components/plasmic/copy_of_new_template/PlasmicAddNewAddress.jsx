// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7vKXJ6EAs24qnU9RSWqEKT
// Component: NhIuk_aWBbPx-y
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import Button from "../../Button"; // plasmic-import: 1dNB0d53gYBxGU/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import Select from "../../Select"; // plasmic-import: Ox4yvk8zsFH52W/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_copy_of_new_template.module.css"; // plasmic-import: 7vKXJ6EAs24qnU9RSWqEKT/projectcss
import sty from "./PlasmicAddNewAddress.module.css"; // plasmic-import: NhIuk_aWBbPx-y/css
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: NcqVdLy5PYV-DR/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: 8mVhgDwdGYGNoE/icon
import frame19FqzQrPaSh28KBs3 from "./images/frame19.svg"; // plasmic-import: fqzQrPaSh28KBs3/picture

export const PlasmicAddNewAddress__VariantProps = new Array();

export const PlasmicAddNewAddress__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAddNewAddress__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectCountry.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <GraphqlFetcher
            data-plasmic-name={"graphQlFetcher"}
            data-plasmic-override={overrides.graphQlFetcher}
            className={classNames("__wab_instance", sty.graphQlFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"POST"}
            noLayout={false}
            query={{
              query:
                "query MyQuery($name: String) {\n  characters(filter: {name: $name}) {\n    results {\n      name\n      species\n      image\n    }\n  }\n}\n",
              variables: { name: "Rick Sanchez" }
            }}
            url={"https://rickandmortyapi.com/graphql"}
            varOverrides={{}}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      data-plasmic-name={"frame2"}
                      data-plasmic-override={overrides.frame2}
                      className={classNames(projectcss.all, sty.frame2)}
                    >
                      <div
                        data-plasmic-name={"frame3"}
                        data-plasmic-override={overrides.frame3}
                        className={classNames(projectcss.all, sty.frame3)}
                      >
                        <div
                          data-plasmic-name={"group5"}
                          data-plasmic-override={overrides.group5}
                          className={classNames(projectcss.all, sty.group5)}
                        >
                          <div
                            data-plasmic-name={"group6"}
                            data-plasmic-override={overrides.group6}
                            className={classNames(projectcss.all, sty.group6)}
                          >
                            <Group2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__czCca
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame4"}
                      data-plasmic-override={overrides.frame4}
                      className={classNames(projectcss.all, sty.frame4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ks74G
                        )}
                      >
                        {"000 800 100 9538"}
                      </div>
                      <div
                        data-plasmic-name={"autoLayoutHorizontal"}
                        data-plasmic-override={overrides.autoLayoutHorizontal}
                        className={classNames(
                          projectcss.all,
                          sty.autoLayoutHorizontal
                        )}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: frame19FqzQrPaSh28KBs3,
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"autoLayoutHorizontal2"}
                        data-plasmic-override={overrides.autoLayoutHorizontal2}
                        className={classNames(
                          projectcss.all,
                          sty.autoLayoutHorizontal2
                        )}
                      >
                        <div
                          data-plasmic-name={"frame5"}
                          data-plasmic-override={overrides.frame5}
                          className={classNames(projectcss.all, sty.frame5)}
                        >
                          <div
                            data-plasmic-name={"group3"}
                            data-plasmic-override={overrides.group3}
                            className={classNames(projectcss.all, sty.group3)}
                          >
                            <div
                              data-plasmic-name={"group4"}
                              data-plasmic-override={overrides.group4}
                              className={classNames(projectcss.all, sty.group4)}
                            >
                              <Group3Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kmeL2
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <div
                      data-plasmic-name={"container"}
                      data-plasmic-override={overrides.container}
                      className={classNames(projectcss.all, sty.container)}
                    />

                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      <div
                        data-plasmic-name={"group"}
                        data-plasmic-override={overrides.group}
                        className={classNames(projectcss.all, sty.group)}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vLtQx
                          )}
                          link={`/account-page`}
                        >
                          {"BACK"}
                        </Button>
                        <div
                          data-plasmic-name={"titleHeader"}
                          data-plasmic-override={overrides.titleHeader}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.titleHeader
                          )}
                        >
                          {"ADD NEW ADDRESS"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    className={classNames("__wab_instance", sty.form)}
                    extendedOnValuesChange={p.generateStateOnChangeProp(
                      $state,
                      ["form", "value"]
                    )}
                    labelCol={{ span: 8, horizontalOnly: true }}
                    layout={"vertical"}
                    submitSlot={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__wTr9B
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pFda
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    }
                    wrapperCol={{ span: 16, horizontalOnly: true }}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__rckBj
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mgaKd
                          )}
                        >
                          {"First Name"}
                        </div>
                      }
                      name={"name"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__iygWl
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__svR3Z
                          )}
                        >
                          {"Last Name"}
                        </div>
                      }
                      name={"message"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.textArea),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["textArea", "value"],
                              AntdTextArea_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "textArea",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea.value"
                            }
                          ],

                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea"}
                            data-plasmic-override={overrides.textArea}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nSpq5
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gkYcn
                          )}
                        >
                          {"Address1"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input2", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__hmTl1
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l83Yf
                          )}
                        >
                          {"Address2"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input3", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__u6R2T
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oxTXv
                          )}
                        >
                          {"City"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__ci7Zi
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lcbcA
                          )}
                        >
                          {"Country"}
                        </div>
                      }
                    >
                      <Select
                        data-plasmic-name={"selectCountry"}
                        data-plasmic-override={overrides.selectCountry}
                        className={classNames(
                          "__wab_instance",
                          sty.selectCountry
                        )}
                        onChange={(...eventArgs) => {
                          p.generateStateOnChangeProp($state, [
                            "selectCountry",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null }
                          ];

                          __composite["0"]["value"] = "INDIA";
                          __composite["0"]["label"] = "INDIA";
                          __composite["1"]["value"] = "USA";
                          __composite["1"]["label"] = "USA";
                          return __composite;
                        })()}
                        placeholder={"Select country"}
                        value={p.generateStateValueProp($state, [
                          "selectCountry",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__qbwNr
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lUidj
                          )}
                        >
                          {"Zip"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___9GUfb
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7ZPoQ
                          )}
                        >
                          {"Province"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input8),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__bc1Hw
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rVuYa
                          )}
                        >
                          {"Phone"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input7", "value"],
                              AntdInput_Helpers
                            ),
                          type: "tel",
                          value: p.generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__quuk0
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lqxft
                        )}
                      >
                        {"ADD ADDRESS"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                </div>
              )}
            </ph.DataCtxReader>
          </GraphqlFetcher>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "graphQlFetcher",
    "freeBox",
    "frame",
    "frame2",
    "frame3",
    "group5",
    "group6",
    "frame4",
    "autoLayoutHorizontal",
    "img",
    "autoLayoutHorizontal2",
    "frame5",
    "group3",
    "group4",
    "header",
    "container",
    "group2",
    "group",
    "titleHeader",
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7"
  ],

  graphQlFetcher: [
    "graphQlFetcher",
    "freeBox",
    "frame",
    "frame2",
    "frame3",
    "group5",
    "group6",
    "frame4",
    "autoLayoutHorizontal",
    "img",
    "autoLayoutHorizontal2",
    "frame5",
    "group3",
    "group4",
    "header",
    "container",
    "group2",
    "group",
    "titleHeader",
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7"
  ],

  freeBox: [
    "freeBox",
    "frame",
    "frame2",
    "frame3",
    "group5",
    "group6",
    "frame4",
    "autoLayoutHorizontal",
    "img",
    "autoLayoutHorizontal2",
    "frame5",
    "group3",
    "group4",
    "header",
    "container",
    "group2",
    "group",
    "titleHeader",
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7"
  ],

  frame: [
    "frame",
    "frame2",
    "frame3",
    "group5",
    "group6",
    "frame4",
    "autoLayoutHorizontal",
    "img",
    "autoLayoutHorizontal2",
    "frame5",
    "group3",
    "group4"
  ],

  frame2: ["frame2", "frame3", "group5", "group6"],
  frame3: ["frame3", "group5", "group6"],
  group5: ["group5", "group6"],
  group6: ["group6"],
  frame4: [
    "frame4",
    "autoLayoutHorizontal",
    "img",
    "autoLayoutHorizontal2",
    "frame5",
    "group3",
    "group4"
  ],

  autoLayoutHorizontal: ["autoLayoutHorizontal", "img"],
  img: ["img"],
  autoLayoutHorizontal2: [
    "autoLayoutHorizontal2",
    "frame5",
    "group3",
    "group4"
  ],

  frame5: ["frame5", "group3", "group4"],
  group3: ["group3", "group4"],
  group4: ["group4"],
  header: ["header", "container", "group2", "group", "titleHeader"],
  container: ["container"],
  group2: ["group2", "group", "titleHeader"],
  group: ["group", "titleHeader"],
  titleHeader: ["titleHeader"],
  form: [
    "form",
    "input",
    "textArea",
    "input2",
    "input3",
    "input4",
    "selectCountry",
    "input6",
    "input8",
    "input7"
  ],

  input: ["input"],
  textArea: ["textArea"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  selectCountry: ["selectCountry"],
  input6: ["input6"],
  input8: ["input8"],
  input7: ["input7"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAddNewAddress__ArgProps,
          internalVariantPropNames: PlasmicAddNewAddress__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddNewAddress__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddNewAddress";
  } else {
    func.displayName = `PlasmicAddNewAddress.${nodeName}`;
  }
  return func;
}

export const PlasmicAddNewAddress = Object.assign(
  // Top-level PlasmicAddNewAddress renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    group5: makeNodeComponent("group5"),
    group6: makeNodeComponent("group6"),
    frame4: makeNodeComponent("frame4"),
    autoLayoutHorizontal: makeNodeComponent("autoLayoutHorizontal"),
    img: makeNodeComponent("img"),
    autoLayoutHorizontal2: makeNodeComponent("autoLayoutHorizontal2"),
    frame5: makeNodeComponent("frame5"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    group2: makeNodeComponent("group2"),
    group: makeNodeComponent("group"),
    titleHeader: makeNodeComponent("titleHeader"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    selectCountry: makeNodeComponent("selectCountry"),
    input6: makeNodeComponent("input6"),
    input8: makeNodeComponent("input8"),
    input7: makeNodeComponent("input7"),
    // Metadata about props expected for PlasmicAddNewAddress
    internalVariantProps: PlasmicAddNewAddress__VariantProps,
    internalArgProps: PlasmicAddNewAddress__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddNewAddress;
/* prettier-ignore-end */
